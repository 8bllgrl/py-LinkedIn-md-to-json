{
    "questions": [
        {
            "topic": "Django",
            "id": 1,
            "question": "\"To cache your entire site for an application in Django, you add all except which of these settings?\"",
            "body": "",
            "answer": "\"django.middleware.cache.AcceleratedCacheMiddleware\"",
            "choices": [
                "django.middleware.common.CommonMiddleware",
                "django.middleware.cache.UpdateCacheMiddleware",
                "django.middleware.cache.FetchFromCacheMiddleware",
                "django.middleware.cache.AcceleratedCacheMiddleware"
            ]
        },
        {
            "topic": "Django",
            "id": 2,
            "question": "\"In which programming language is Django written?\"",
            "body": "",
            "answer": "\"Python\"",
            "choices": [
                "C++",
                "Java",
                "Python",
                "Ruby"
            ]
        },
        {
            "topic": "Django",
            "id": 3,
            "question": "\"To automatically provide a value for a field, or to do validation that requires access to more than a single field, you should override the `___` method in the `___` class.\"",
            "body": "",
            "answer": "\"clean(); Field\"",
            "choices": [
                "validate(); Model",
                "group(); Model",
                "validate(); Form",
                "clean(); Field"
            ]
        },
        {
            "topic": "Django",
            "id": 4,
            "question": "\"A client wants their site to be able to load \"Rick & Morty\" episodes by number or by title\u2014e.g., shows/3/3 or shows/picklerick. Which URL pattern do you recommend?\"",
            "body": "",
            "answer": "\"B\"",
            "choices": [
                "A",
                "```python\nurl(r'shows/<int:season>/<int:episode>/', views.episode_number),\nurl(r'shows/<slug:episode_name>/', views.episode_name)\n```",
                "B",
                "```python\npath('shows/<int:season>/<int:episode>/', views.episode_number),\npath('shows/<slug:episode_name>/', views.episode_name)\n```",
                "C",
                "```python\npath('shows/<int:season>/<int:episode>', views.episode_number),\npath('shows/<slug:episode_name>/', views.episode_number)\n```",
                "D",
                "```python\nurl(r'^show/(?P<season>[0-9]+)/(?P<episode>[0-9]+)/$', views.episode_number),\nurl(r'^show/(?P<episode_name>[\\w-]+)/', views.episode_name\n```"
            ]
        },
        {
            "topic": "Django",
            "id": 5,
            "question": "\"How do you determine at startup time if a piece of middleware should be used?\"",
            "body": "",
            "answer": "\"Raise MiddlewareNotUsed in the **init** function of your middleware.\"",
            "choices": [
                "Raise MiddlewareNotUsed in the **init** function of your middleware.",
                "Implement the not_used method in your middleware class.",
                "List the middleware beneath an entry of django.middleware.IgnoredMiddleware.",
                "Write code to remove the middleware from the settings in [app]/**init**.py."
            ]
        },
        {
            "topic": "Django",
            "id": 6,
            "question": "\"How do you turn off Django\u2019s automatic HTML escaping for part of a web page?\"",
            "body": "",
            "answer": "\"You don't need to do anything\u2014autoescaping is off by default.\"",
            "choices": [
                "Place that section between paragraph tags containing the autoescape=off switch.",
                "Wrap that section between { percentage mark autoescape off percentage mark} and {percentage mark endautoescape percentage mark} tags.",
                "Wrap that section between {percentage mark autoescapeoff percentage mark} and {percentage mark endautoescapeoff percentage mark} tags.",
                "You don't need to do anything\u2014autoescaping is off by default."
            ]
        },
        {
            "topic": "Django",
            "id": 7,
            "question": "\"Which step would NOT help you troubleshoot the error \"django-admin: command not found\"?\"",
            "body": "",
            "answer": "\"Make sure that you have created a Django project.\"",
            "choices": [
                "Check that the bin folder inside your Django directory is on your system path.",
                "Make sure you have activated the virtual environment you have set up containing Django.",
                "Check that you have installed Django.",
                "Make sure that you have created a Django project."
            ]
        },
        {
            "topic": "Django",
            "id": 8,
            "question": "\"Every time a user is saved, their quiz_score needs to be recalculated. Where might be an ideal place to add this logic?\"",
            "body": "",
            "answer": "\"model\"",
            "choices": [
                "template",
                "model",
                "database",
                "view"
            ]
        },
        {
            "topic": "Django",
            "id": 9,
            "question": "\"What is the correct way to begin a class called \"Rainbow\" in Python?\"",
            "body": "",
            "answer": "\"class Rainbow:\"",
            "choices": [
                "Rainbow {}",
                "export Rainbow:",
                "class Rainbow:",
                "def Rainbow:"
            ]
        },
        {
            "topic": "Django",
            "id": 10,
            "question": "\"You have inherited a Django project and need to get it running locally. It comes with a requirements.txt file containing all its dependencies. Which command should you use?\"",
            "body": "",
            "answer": "\"pip install -r requirements.txt\"",
            "choices": [
                "django-admin startproject requirements.txt",
                "python install -r requirements.txt",
                "pip install -r requirements.txt",
                "pip install Django"
            ]
        },
        {
            "topic": "Django",
            "id": 11,
            "question": "\"Which best practice is NOT relevant to migrations?\"",
            "body": "",
            "answer": "\"To make sure that your migrations are up to date, you should run updatemigrations before running your tests.\"",
            "choices": [
                "To make sure that your migrations are up to date, you should run updatemigrations before running your tests.",
                "You should back up your production database before running a migration.",
                "Your migration code should be under source control.",
                "If a project has a lot of data, you should test against a staging copy before running the migration on production."
            ]
        },
        {
            "topic": "Django",
            "id": 12,
            "question": "\"What will this URL pattern match? url(r'^\\$', views.hello)\"",
            "body": "",
            "answer": "\"an empty string at the server root\"",
            "choices": [
                "a string beginning with the letter Ra string beginning with the letter R",
                "an empty string at the server root",
                "a string containing ^ and $a string containing ^ and $",
                "an empty string anywhere in the URLan empty string anywhere in the URL"
            ]
        },
        {
            "topic": "Django",
            "id": 13,
            "question": "\"What is the typical order of an HTTP request/response cycle in Django?\"",
            "body": "",
            "answer": "\"URL > view > template\"",
            "choices": [
                "URL > view > template",
                "form > model > view",
                "template > view > model",
                "URL > template > view > model"
            ]
        },
        {
            "topic": "Django",
            "id": 14,
            "question": "\"Django's class-based generic views provide which classes that implement common web development tasks?\"",
            "body": "",
            "answer": "\"abstract\"",
            "choices": [
                "concrete",
                "thread-safe",
                "abstract",
                "dynamic"
            ]
        },
        {
            "topic": "Django",
            "id": 15,
            "question": "\"Which skills do you need to maintain a set of Django templates?\"",
            "body": "",
            "answer": "\"HTML and template syntax\"",
            "choices": [
                "template syntax",
                "HTML and template syntax",
                "Python, HTML, and template syntax",
                "Python and template syntax"
            ]
        },
        {
            "topic": "Django",
            "id": 16,
            "question": "\"How would you define the relationship between a star and a constellation in a Django model?\"",
            "body": "",
            "answer": "\"A\"",
            "choices": [
                "A",
                "```python\nclass Star(models.Model):\nname = models.CharField(max_length=100)\nclass Constellation(models.Model):\nstars = models.ManyToManyField(Star)\n```",
                "B",
                "```python\nclass Star(models.Model):\nconstellation = models.ForeignKey(Constellation, on_delete=models.CASCADE)\nclass Constellation(models.Model):\nstars = models.ForeignKey(Star, on_delete=models.CASCADE)\n```",
                "C",
                "```python\nclass Star(models.Model):\nname = models.CharField(max_length=100)\nclass Constellation(models.Model):\nstars = models.OneToManyField(Star)\n```",
                "D",
                "```python\nclass Star(models.Model):\nconstellation = models.ManyToManyField(Constellation)\nclass Constellation(models.Model):\nname = models.CharField(max_length=100)\n```"
            ]
        },
        {
            "topic": "Django",
            "id": 17,
            "question": "\"Which is NOT a valid step in configuring your Django 2.x instance to serve up static files such as images or CSS?\"",
            "body": "",
            "answer": "\"In your urls file, add a pattern that includes the name of your static directory.\"",
            "choices": [
                "In your urls file, add a pattern that includes the name of your static directory.",
                "Create a directory named static inside your app directory.",
                "Create a directory named after the app under the static directory, and place static files inside.",
                "Use the template tag {percentage mark load static percentage mark}."
            ]
        },
        {
            "topic": "Django",
            "id": 18,
            "question": "\"What is the correct way to make a variable available to all of your templates?\"",
            "body": "",
            "answer": "\"Use RequestContext.\"",
            "choices": [
                "Set a session variable.",
                "Use a global variable.",
                "Add a dictionary to the template context.",
                "Use RequestContext."
            ]
        },
        {
            "topic": "Django",
            "id": 19,
            "question": "\"Should you create a custom user model for new projects?\"",
            "body": "",
            "answer": "\"No. Django's built-in models.User class has been tried and tested\u2014no point in reinventing the wheel.\"",
            "choices": [
                "No. Using a custom user model could break the admin interface and some third-party apps.",
                "Yes. It is easier to make changes once it goes into production.",
                "No. Django's built-in models.User class has been tried and tested\u2014no point in reinventing the wheel.",
                "Yes, as there is no other option."
            ]
        },
        {
            "topic": "Django",
            "id": 20,
            "question": "\"You want to create a page that allows editing of two classes connected by a foreign key (e.g., a question and answer that reside in separate tables). What Django feature can you use?\"",
            "body": "",
            "answer": "\"actions\"",
            "choices": [
                "actions",
                "admin",
                "mezcal",
                "inlines"
            ]
        },
        {
            "topic": "Django",
            "id": 21,
            "question": "\"Why are QuerySets considered \"lazy\"?\"",
            "body": "",
            "answer": "\"QuerySets do not create any database activity until they are evaluated.\"",
            "choices": [
                "The results of a QuerySet are not ordered.",
                "QuerySets do not create any database activity until they are evaluated.",
                "QuerySets do not load objects into memory until they are needed.",
                "Using QuerySets, you cannot execute more complex queries."
            ]
        },
        {
            "topic": "Django",
            "id": 22,
            "question": "\"You receive a `MultiValueDictKeyError` when trying to access a request parameter with the following code: request.GET['search_term']. Which solution will NOT help you in this scenario?\"",
            "body": "",
            "answer": "\"Switch to using POST instead of GET as the request method.\"",
            "choices": [
                "Switch to using POST instead of GET as the request method.",
                "Make sure the input field in your form is also named \"search_term\".",
                "Use MultiValueDict's GET method instead of hitting the dictionary directly like this: request.GET.get('search_term', '').",
                "Check if the search_term parameter is present in the request before attempting to access it."
            ]
        },
        {
            "topic": "Django",
            "id": 23,
            "question": "\"Which function of Django's Form class will render a form's fields as a series of <p> tags?\"",
            "body": "",
            "answer": "\"as_p()\"",
            "choices": [
                "show_fields()",
                "as_p()",
                "as_table()",
                "fields()"
            ]
        },
        {
            "topic": "Django",
            "id": 24,
            "question": "\"You have found a bug in Django and you want to submit a patch. Which is the correct procedure?\"",
            "body": "",
            "answer": "\"all of these answers.\"",
            "choices": [
                "Fork the Django repository GitHub.",
                "Submit a pull request.",
                "all of these answers.",
                "Run Django's test suite."
            ]
        },
        {
            "topic": "Django",
            "id": 25,
            "question": "\"Django supplies sensible default values for settings. In which Python module can you find these settings?\"",
            "body": "",
            "answer": "\"`django.conf.global_settings.py`\"",
            "choices": [
                "`django.utils.default_settings.py`",
                "`django.utils.global_settings.py`",
                "`django.conf.default_settings.py`",
                "`django.conf.global_settings.py`"
            ]
        },
        {
            "topic": "Django",
            "id": 26,
            "question": "\"Which variable name is best according to PEP 8 guidelines?\"",
            "body": "",
            "answer": "\"number_of_fingers\"",
            "choices": [
                "numFingers",
                "number-of-Fingers",
                "number_of_fingers",
                "finger_num"
            ]
        },
        {
            "topic": "Django",
            "id": 27,
            "question": "\"A project has accumulated 500 migrations. Which course of action would you pursue?\"",
            "body": "",
            "answer": "\"Use squashmigrations to reduce the number\"",
            "choices": [
                "Manually merge your migration files to reduce the number",
                "Don't worry about the number",
                "Try to minimize the number of migrations",
                "Use squashmigrations to reduce the number"
            ]
        },
        {
            "topic": "Django",
            "id": 28,
            "question": "\"What does an F() object allow you when dealing with models?\"",
            "body": "",
            "answer": "\"perform db operations without fetching a model object\"",
            "choices": [
                "perform db operations without fetching a model object",
                "define db transaction isolation levels",
                "use aggregate functions more easily",
                "build reusable QuerySets"
            ]
        },
        {
            "topic": "Django",
            "id": 29,
            "question": "\"Which is not a Django filed type for holding integers?\"",
            "body": "",
            "answer": "\"NegativeIntegerField\"",
            "choices": [
                "SmallIntegerField",
                "NegativeIntegerField",
                "BigAutoField",
                "PositiveIntegerField"
            ]
        },
        {
            "topic": "Django",
            "id": 30,
            "question": "\"Which will show the currently installed version?\"",
            "body": "",
            "answer": "\"import django django.get_version()\"",
            "choices": [
                "print (django.version)",
                "import django django.getVersion()",
                "import django django.get_version()",
                "python -c django --version"
            ]
        },
        {
            "topic": "Django",
            "id": 31,
            "question": "\"You should use the http method `___` to read data and `___` to update or create data\"",
            "body": "",
            "answer": "\"GET; POST\"",
            "choices": [
                "READ; WRITE",
                "GET; POST",
                "POST; GET",
                "GET; PATCH"
            ]
        },
        {
            "topic": "Django",
            "id": 32,
            "question": "\"When should you employ the POST method over GET for submitting data?\"",
            "body": "",
            "answer": "\"when the data in the form may be sensitive\"",
            "choices": [
                "when efficiency is important",
                "when you want the data to be cached",
                "when you want to use your browser to help with debugging",
                "when the data in the form may be sensitive"
            ]
        },
        {
            "topic": "Django",
            "id": 33,
            "question": "\"When to use the Django sites framework?\"",
            "body": "",
            "answer": "\"if your single installation powers more than one site\"",
            "choices": [
                "if your single installation powers more than one site",
                "if you need to serve static as well as dynamic content",
                "if you want your app have a fully qualified domain name",
                "if you are expecting more than 10.000 users"
            ]
        },
        {
            "topic": "Django",
            "id": 34,
            "question": "\"Which infrastructure do you need:\"",
            "body": "`title=models.charfield(max_length=100, validators=[validate_spelling])`",
            "answer": "\"a validators file containing a function called validate_spelling imported at the top of model\"",
            "choices": [
                "inizialized array called validators",
                "a validators file containing a function called validate_spelling imported at the top of model",
                "a validators file containing a function called validate imported at the top of model",
                "spelling package imported at the top of model"
            ]
        },
        {
            "topic": "Django",
            "id": 35,
            "question": "\"What decorator is used to require that a view accepts only the get and head methods?\"",
            "body": "",
            "answer": "\"require_safe()\"",
            "choices": [
                "require_safe()",
                "require_put()",
                "require_post()",
                "require_get()"
            ]
        },
        {
            "topic": "Django",
            "id": 36,
            "question": "\"How would you define the relation between a book and an author - book has only one author.\"",
            "body": "```python\nclass Author (models.model):\nbook=models.foreignkey(Book,on_delete=models.cascade)\nclass Book(models.model):\nname=models.charfield(max_length=100)\n```",
            "answer": "\"A\"",
            "choices": [
                "A",
                "```python\nclass Author (models.model):\nname=models.charfield(max_length=100)\nclass Book(models.model):\nauthor=models.foreignkey(Author,on_delete=models.cascade)\n```",
                "B",
                "```python\nclass Author (models.model):\nname=models.charfield(max_length=100)\nclass Book(models.model):\nauthor=models.foreignkey(Author)\n```",
                "C",
                "```python\nclass Author (models.model):\nname=models.charfield(max_length=100)\nclass Book(models.model):\nauthor=models.foreignkey(Author,on_delete=models.cascade)\n```",
                "D",
                "```python\nclass Author (models.model):\nname=models.charfield(max_length=100)\nclass Book(models.model):\nauthor=Author.name\n```"
            ]
        },
        {
            "topic": "Django",
            "id": 37,
            "question": "\"What is a callable that takes a value and raises an error if the value fails?\"",
            "body": "",
            "answer": "\"validator\"",
            "choices": [
                "validator",
                "deodorizer",
                "mediator",
                "regular expression"
            ]
        },
        {
            "topic": "Django",
            "id": 38,
            "question": "\"To secure an API endpoint, making it accessible to registered users only, you can replace the rest_framework.permissions.allowAny value in the default_permissions section of your settings.py to\"",
            "body": "",
            "answer": "\"rest_framework.permissions.IsAuthenticated\"",
            "choices": [
                "rest_framework.permissions.IsAdminUser",
                "rest_framework.permissions.IsAuthenticated",
                "rest_framework.permissions.IsAuthorized",
                "rest_framework.permissions.IsRegistered"
            ]
        },
        {
            "topic": "Django",
            "id": 39,
            "question": "\"Which command would you use to apply a migration?\"",
            "body": "",
            "answer": "\"migrate\"",
            "choices": [
                "makemigration",
                "update_db",
                "applymigration",
                "migrate"
            ]
        },
        {
            "topic": "Django",
            "id": 40,
            "question": "\"Which type of class allows QuerySets and model instances to be converted to native Python data types for use in APIs?\"",
            "body": "",
            "answer": "\"serializers\"",
            "choices": [
                "objectwriters",
                "serializers",
                "picklers",
                "viewsets"
            ]
        },
        {
            "topic": "Django",
            "id": 41,
            "question": "\"How should the code end?\"",
            "body": "```python\n{ percentage if spark >= 50 percentage }\nLots of spark\n{percentage elif spark == 42 percentage}\n```",
            "answer": "\"{percentage endif percentage}\"",
            "choices": [
                "{ percentage else percentage}",
                "{percentage endif percentage}",
                "Nothing needed",
                "{percentage end percentage}"
            ]
        },
        {
            "topic": "Django",
            "id": 42,
            "question": "\"Which code block will create a serializer?\"",
            "body": "```python\nfrom rest_framework import serializers\nfrom .models import Planet\n```",
            "answer": "\"A\"",
            "choices": [
                "A",
                "```python\nclass PlanetSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel=Planet\nfields=('name','position', 'mass', 'rings')\n```",
                "B",
                "```python\nfrom rest_framework import serializers\nfrom .models import Planet\nclass PlanetSerializer():\nclass Meta:\nfields=('name','position', 'mass', 'rings')\nmodel=Planet\n```",
                "C",
                "```python\nfrom django.db import serializers\nfrom .models import Planet\nclass PlanetSerializer(serializers.ModelSerializer):\nfields=('name','position', 'mass', 'rings')\nmodel=Sandwich\n```",
                "D",
                "```python\nfrom django.db import serializers\nfrom .models import Planet\nclass PlanetSerializer(serializers.ModelSerializer):\nclass Meta:\nfields=('name')\nmodel=Planet\n```"
            ]
        },
        {
            "topic": "Django",
            "id": 43,
            "question": "\"Which class allows you to automatically create a Serializer class with fields and validators that correspond to your model's fields?\"",
            "body": "",
            "answer": "\"ModelSerializer\"",
            "choices": [
                "ModelSerializer",
                "Model",
                "DataSerializer",
                "ModelToSerializer"
            ]
        },
        {
            "topic": "Django",
            "id": 44,
            "question": "\"Which command to access the built-in admin tool for the first time?\"",
            "body": "",
            "answer": "\"python manage.py createsuperuser\"",
            "choices": [
                "django-admin setup",
                "django-admin runserver",
                "python manage.py createuser",
                "python manage.py createsuperuser"
            ]
        },
        {
            "topic": "Django",
            "id": 45,
            "question": "\"Virtual environments are for managing dependencies. Which granularity works best?\"",
            "body": "",
            "answer": "\"you should set up a new virtualenv for each Django project\"",
            "choices": [
                "you should set up a new virtualenv for each Django project",
                "They should not be used",
                "Use the same venv for all your Django work",
                "Use a new venv for each Django app"
            ]
        },
        {
            "topic": "Django",
            "id": 46,
            "question": "\"What executes various Django commands such as running a webserver or creating an app?\"",
            "body": "",
            "answer": "\"manage.py\"",
            "choices": [
                "migrate.py",
                "wsgi.py",
                "manage.py",
                "runserver"
            ]
        },
        {
            "topic": "Django",
            "id": 47,
            "question": "\"What do Django best practice suggest should be \"fat\"?\"",
            "body": "",
            "answer": "\"models\"",
            "choices": [
                "models",
                "controllers",
                "programmers",
                "clients"
            ]
        },
        {
            "topic": "Django",
            "id": 48,
            "question": "\"Which is not part of Django's design philosophy?\"",
            "body": "",
            "answer": "\"Implicit over explicit\"",
            "choices": [
                "Loose Coupling",
                "Less Code",
                "Fast Development",
                "Implicit over explicit"
            ]
        },
        {
            "topic": "Django",
            "id": 49,
            "question": "\"What is the result of this template code?\"",
            "body": "{{\"live long and prosper\"|truncate:3}}",
            "answer": "\"live long and ...\"",
            "choices": [
                "live long and ...",
                "live long and",
                "a compilation error",
                "liv"
            ]
        },
        {
            "topic": "Django",
            "id": 50,
            "question": "\"When does this code load data into memory?\"",
            "body": "```\n1 sandwiches = Sandwich.objects.filter(is_vegan=True)\n2 for sandwich in sandwiches:\n3   print(sandwich.name + \" - \" + sandwich.spice_level)\n```",
            "answer": "\"It depends on how many results return by query.\"",
            "choices": [
                "line 1",
                "It depends on how many results return by query.",
                "It depends on cache.",
                "line 2"
            ]
        },
        {
            "topic": "Django",
            "id": 51,
            "question": "\"You are building a web application using a React front end and a Django back end. For what will you need to provision?\\*\\*\"",
            "body": "",
            "answer": "\"CORS middleware\"",
            "choices": [
                "an NGINX web server",
                "a NoSQL database",
                "a larger hard drive",
                "CORS middleware"
            ]
        },
        {
            "topic": "Django",
            "id": 52,
            "question": "\"To expose an existing model via an API endpoint, what do you need to implement?\\*\\*\"",
            "body": "",
            "answer": "\"a serializer\"",
            "choices": [
                "an HTTP request",
                "a JSON object",
                "a query",
                "a serializer"
            ]
        },
        {
            "topic": "Django",
            "id": 53,
            "question": "\"How would you stop Django from performing database table creation or deletion operations via migrations for a particular model?\"",
            "body": "",
            "answer": "\"Set `managed=False` inside the model.\"",
            "choices": [
                "Run the `migrate` command with `--exclude=[model_name]`.",
                "Move the model definition from `models.py` into its own file.",
                "Set `managed=False` inside the model.",
                "Don't run the `migrate` command."
            ]
        },
        {
            "topic": "Django",
            "id": 54,
            "question": "\"what method can you use to check if form data has changed when using a form instance?\"",
            "body": "",
            "answer": "\"has_changed()\"",
            "choices": [
                "has_changed()",
                "its_changed()",
                "has_updated()",
                "None of This"
            ]
        },
        {
            "topic": "Django",
            "id": 55,
            "question": "\"What is WSGI?\"",
            "body": "",
            "answer": "\"a server\"",
            "choices": [
                "a server",
                "an interface specification",
                "a Python module",
                "a framework"
            ]
        },
        {
            "topic": "Django",
            "id": 56,
            "question": "\"Which generic view should be used for displaying the tittles of all Django Reinhardt's songs?\"",
            "body": "",
            "answer": "\"ListView\"",
            "choices": [
                "DetailView",
                "TittleView",
                "SongView",
                "ListView"
            ]
        },
        {
            "topic": "Django",
            "id": 57,
            "question": "\"Which statement is most accurate, regarding using the default SQLite database on your local/development machine but Postgres in production\"",
            "body": "",
            "answer": "\"There's less chance of introducing bugs since SQLite already works out the box\"",
            "choices": [
                "There's less chance of introducing bugs since SQLite already works out the box",
                "It's fine, you just need to keep both instances synchronized",
                "It's a bad idea and could lead to issues down the road",
                "It's the most efficient way to build a project"
            ]
        },
        {
            "topic": "Django",
            "id": 58,
            "question": "\"Why might you want to write a custom model Manager?\"",
            "body": "",
            "answer": "\"to modify the initial QuerySet that the Manager returns\"",
            "choices": [
                "to perform database queries",
                "to set up a database for testing",
                "to modify the initial QuerySet that the Manager returns",
                "to filter the results that a database query returns"
            ]
        },
        {
            "topic": "Django",
            "id": 59,
            "question": "\"In Django, what are used to customize the data that is sent to the templates?\"",
            "body": "",
            "answer": "\"views\"",
            "choices": [
                "models",
                "views",
                "forms",
                "serializers"
            ]
        },
        {
            "topic": "Django",
            "id": 60,
            "question": "\"To complete the conditional, what should this block of code end with?\"",
            "body": "```shell\n% if sparles >= 50 %\n  Lots of sparkles!\n% elif sparkles == 42 %\n  The answer to life, the universe, and everything!\n```",
            "answer": "\"`% endif %`\"",
            "choices": [
                "`% endif %`",
                "Nothing else is needed.",
                "`% end%`",
                "`% else %`"
            ]
        },
        {
            "topic": "Django",
            "id": 61,
            "question": "\"When should you employ the POST method over the GET method for submitting data from a form?\"",
            "body": "",
            "answer": "\"when the data in the form may be sensitive\"",
            "choices": [
                "when the data in the form may be sensitive",
                "when you want the data to be cached",
                "when you want to use your browser to help with debugging",
                "when efficiency is important"
            ]
        },
        {
            "topic": "Django",
            "id": 62,
            "question": "\"What is a callable that takes a value and raises an error if the value fails to meet some criteria?\"",
            "body": "",
            "answer": "\"validator\"",
            "choices": [
                "mediator",
                "validator",
                "regular expression",
                "deodorizer"
            ]
        },
        {
            "topic": "Django",
            "id": 63,
            "question": "\"You are uploading a file to Django from a form and you want to save the received file as a field on a model object. You can simply assign the file object from**\\_to a field of type\\_\\_**in the model.\"",
            "body": "",
            "answer": "\"request.FILES; FileField\"",
            "choices": [
                "request.META; FileField",
                "request.FILES; BLOBField",
                "request.FILES; FileField",
                "request.META.Files; CLOBField"
            ]
        },
        {
            "topic": "Django",
            "id": 64,
            "question": "\"What python module might be used to store the current state of a Django model in a file?\"",
            "body": "",
            "answer": "\"pickle\"",
            "choices": [
                "pickle",
                "struct",
                "marshal",
                "serialize"
            ]
        },
        {
            "topic": "Django",
            "id": 65,
            "question": "\"To add a new app to an existing Django project, you must edit the **_ section of the _** file.\"",
            "body": "",
            "answer": "\"INSTALLED_APPS; settings.py\"",
            "choices": [
                "ALLOWED_HOSTS; settings.py",
                "APPS; manage.py",
                "INSTALLED_APPS; settings.py",
                "TEMPLATES; urls.py"
            ]
        },
        {
            "topic": "Django",
            "id": 66,
            "question": "\"Which is not a third-party package commonly used for authentication?\"",
            "body": "",
            "answer": "\"django-rest-framework-jwt\"",
            "choices": [
                "django-guardian",
                "django-rest-auth",
                "authtoken",
                "django-rest-framework-jwt"
            ]
        },
        {
            "topic": "Django",
            "id": 67,
            "question": "\"Which function in the django.urls package can help you avoid hardcoding URLS by generating a URL given the name of a view?\"",
            "body": "",
            "answer": "\"reverse()\"",
            "choices": [
                "get_script_prefix()",
                "redirect()",
                "reverse()",
                "resolve()"
            ]
        },
        {
            "topic": "Django",
            "id": 68,
            "question": "\"Which is Fictional HTTP request method?\"",
            "body": "",
            "answer": "\"PAUSE\"",
            "choices": [
                "POST",
                "PUT",
                "PAUSE",
                "PATCH"
            ]
        },
        {
            "topic": "Django",
            "id": 69,
            "question": "\"Which helper function is not provided as a part of django.shortcuts package? ref-\"",
            "body": "",
            "answer": "\"render_to_request()\"",
            "choices": [
                "render_to_request()",
                "render()",
                "redirect()",
                "get_object_or_404()"
            ]
        },
        {
            "topic": "Django",
            "id": 70,
            "question": "\"Which is a nonstandard place to store templates?\"",
            "body": "",
            "answer": "\"at the root level of a project\"",
            "choices": [
                "at the root level of a project",
                "inside the application",
                "in the database",
                "on Github"
            ]
        },
        {
            "topic": "Django",
            "id": 71,
            "question": "\"If you left the 8080 off the command python manage.py runserver 8080 what port would Django use as default?\"",
            "body": "",
            "answer": "\"8080\"",
            "choices": [
                "8080",
                "80",
                "8000",
                "It would fail to start"
            ]
        },
        {
            "topic": "Django",
            "id": 72,
            "question": "\"Which statement about Django apps is false?\"",
            "body": "",
            "answer": "\"A Django app is the top-level container for a web application powered by Django.\"",
            "choices": [
                "A Django app is the top-level container for a web application powered by Django.",
                "Django apps are small libraries designed to represent a single aspect of a project.",
                "Each Django app should do one thing, and one thing alone.",
                "A Django project is made up of many apps."
            ]
        },
        {
            "topic": "Django",
            "id": 73,
            "question": "\"Which characters are illegal in template variable names?\"",
            "body": "",
            "answer": "\"punctuation marks .\"",
            "choices": [
                "underscores.",
                "uppercase letters.",
                "punctuation marks .",
                "numbers."
            ]
        },
        {
            "topic": "Django",
            "id": 74,
            "question": "\"Which is not a valid closing template tag?\"",
            "body": "",
            "answer": "\"`% endifempty %`\"",
            "choices": [
                "`% endautoescape %`",
                "`% endifempty %`",
                "`% endcomment %`",
                "`% endfilter %`"
            ]
        },
        {
            "topic": "Django",
            "id": 75,
            "question": "\"When would you need to use the reverse_lazy utility function instead of reverse?\"",
            "body": "",
            "answer": "\"all of the these answers\"",
            "choices": [
                "when you want to provide a reverse URL as a default value for a parameter in a function's signature",
                "all of the these answers",
                "when you want to provide a reverse URL as the url attribute of a class-based generic view",
                "when you want to provide a URL to a decorator, such as the login_url argument for the permission_required() decorator"
            ]
        },
        {
            "topic": "Django",
            "id": 76,
            "question": "\"What is the purpose of the **init**.py file?\"",
            "body": "",
            "answer": "\"to declare the directory contents as a Python module\"",
            "choices": [
                "to extend the set of modules found in a package",
                "to allow compiled modules from different releases and different versions of Python to coexist",
                "to initialize project settings",
                "to declare the directory contents as a Python module"
            ]
        },
        {
            "topic": "Django",
            "id": 77,
            "question": "\"What python package can be used to edit numbers into more readable form like \"1200000\" to \"1.2 million\"?\"",
            "body": "",
            "answer": "\"humanize\"",
            "choices": [
                "black",
                "puffer",
                "pitch",
                "humanize"
            ]
        },
        {
            "topic": "Django",
            "id": 78,
            "question": "\"Where would you find the settings.py file?\"",
            "body": "",
            "answer": "\"\\[projectname\\]/settings.py\"",
            "choices": [
                "\\[projectname\\]/settings.py",
                "\\[projectname\\]/\\[projectname\\]/settings.py",
                "\\[PYTHON_ROOT\\]/settings.py",
                "\\[DJANGO_ROOT]/settings.py"
            ]
        }
    ]
}